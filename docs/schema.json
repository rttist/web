{
	"$schema": "http://json-schema.org/draft-07/schema#",
	"properties": {
		"metadata": {
			"description": "Configuration section for the metadata",
			"type": "object",
			"properties": {
				"outDir": {
					"description": "Path where the metadata should be written to.",
					"default": "dist/",
					"type": "string"
				},
				"typelibImportPath": {
					"description": "Path for importing `internal.typelib.js` file from transpiled version of `metadata.typelib.ts` file that is generated by Typegen into your project root.",
					"default": "./internal.typelib",
					"type": "string"
				},
				"include": {
					"description": "List of glob patterns matching modules which should be included in metadata.",
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"includeDtsFiles": {
					"description": "Include .d.ts files. The .d.ts are excluded by default.",
					"default": false,
					"type": "boolean"
				},
				"exclude": {
					"description": "List of glob patterns matching modules which should be excluded from metadata.",
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"encode": {
					"description": "Enable metadata encoding. Currently, the base32768 UTF-16 encoding will be used.",
					"default": true,
					"type": "boolean"
				}
			},
			"required": ["include"]
		},
		"transformer": {
			"description": "Configuration section for the transformer",
			"type": "object",
			"properties": {
				"useRuntimeGenericClasses": {
					"description": "Use runtime generic classes. That means that the RTTIST handles all `new` expression (e.g. `new MyClass<Foo>()` in your code and generates generic classes at runtime and creates instances of them.",
					"default": true,
					"type": "boolean"
				}
			},
			"required": []
		},
		"devMode": {
			"description": "Enable or disable DEBUG mode (progress logging and extra warnings).",
			"default": false,
			"type": "boolean"
		},
		"logLevel": {
			"description": "Level of logging.",
			"default": "Info",
			"type": "string",
			"enum": ["None", "Trace", "Debug", "Info", "Warning", "Error", "Dev"]
		},
		"target": {
			"description": "Target platform.",
			"default": "Universal",
			"type": "string",
			"enum": ["Universal", "Server"]
		},
		"preset": {
			"description": "Configuration preset",
			"default": null,
			"type": "string",
			"enum": ["vite"]
		}
	},
	"required": ["metadata"],
	"type": "object"
}
